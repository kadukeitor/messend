#! /usr/bin/env python
# -*- coding: utf-8 -*-

import os
import json
import urllib
import socket
import getpass
import ConfigParser
from optparse import OptionParser


class BColors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

    def __init__(self, show_colors):
        if show_colors == "False":
            self.HEADER = ''
            self.OKBLUE = ''
            self.OKGREEN = ''
            self.WARNING = ''
            self.FAIL = ''
            self.ENDC = ''
            self.BOLD = ''
            self.UNDERLINE = ''


def get_server():
    return raw_input("Server: ")


def get_host():
    default = socket.gethostname()
    host_input = raw_input("Hostname[" + default + "]: ")
    if not host_input:
        return default
    else:
        return host_input


def get_key():
    user = getpass.getuser()
    params = urllib.urlencode({'user': user, 'server': host})
    try:
        f = urllib.urlopen(server + "/register?%s" % params)
        response = json.loads(f.read())
        return response.get('_id')
    except:
        print
        print bcolors.FAIL + bcolors.BOLD + "Invalid Server" + bcolors.ENDC
        exit()


def get_status():
    params = urllib.urlencode({'key': key})
    try:
        f = urllib.urlopen(server + "/status?%s" % params)
        response = json.loads(f.read())
        print bcolors.OKGREEN + bcolors.BOLD + "Last Messages" + bcolors.ENDC
        for message in response:
            print message.get('datetime') + " " + bcolors.OKGREEN + message.get(
                'user') + bcolors.ENDC + " " + message.get(
                'message')
    except:
        print bcolors.FAIL + bcolors.BOLD + "Error retrieving the Information" + bcolors.ENDC


def get_info():
    print bcolors.OKGREEN + bcolors.BOLD + "Configuration" + bcolors.ENDC
    print "server : " + server
    print "key    : " + key
    print "host   : " + host
    print "color  : " + color


def do_delete():
    confirmation = raw_input("Are you sure [yes]: ")
    if confirmation == "yes":
        os.remove(config_path)
        print "Configuration deleted"
    else:
        print "Operation canceled"


def send_message(message):
    params = urllib.urlencode({'key': key, 'message': message})
    try:
        f = urllib.urlopen(server + "/message?%s" % params)
        response = json.loads(f.read())
        if response.get('_id'):
            print bcolors.OKGREEN + bcolors.BOLD + "Message Saved > " + bcolors.ENDC + response.get('message')
        else:
            print bcolors.FAIL + bcolors.BOLD + "Invalid Key" + bcolors.ENDC
    except:
        print bcolors.FAIL + bcolors.BOLD + "Error saving the Message" + bcolors.ENDC


if __name__ == "__main__":

    option_parser = OptionParser()
    opts, args = option_parser.parse_args()

    config_path = os.path.expanduser("~") + '/.recho.conf'

    config = ConfigParser.RawConfigParser()
    config.read(config_path)

    bcolors = BColors(True)

    try:
        server = config.get('global', 'server')
        key = config.get('global', 'key')
        host = config.get('global', 'host')
        color = config.get('global', 'color')
        bcolors = BColors(color)
    except:
        print bcolors.OKBLUE + bcolors.BOLD + "Welcome to RECHO" + bcolors.ENDC
        print "Before anything you need define the Name to identify this Hostname "
        print "And the URL of the server where the messages will be saved"
        print
        config.add_section('global')
        host = get_host()
        config.set('global', 'host', host)
        server = get_server()
        config.set('global', 'server', server)
        key = get_key()
        config.set('global', 'key', key)
        config.set('global', 'color', True)
        with open(config_path, 'wb') as configfile:
            config.write(configfile)
        print
        print bcolors.OKGREEN + bcolors.BOLD + "Configuration Success" + bcolors.ENDC
        print "You can change the configuration on '~/.recho.conf'"
        print
        exit()

    if len(args) > 0:
        if args[0] == 'status':
            get_status()
        elif args[0] == 'info':
            get_info()
        elif args[0] == 'delete':
            do_delete()
        else:
            send_message(args[0])
    else:
        print bcolors.FAIL + bcolors.BOLD + "The message is required" + bcolors.ENDC
        print "Syntax:"
        print "    $ recho \"[message]\""
        print "Reserved Messages:"
        print "    $ recho status"
        print "         (Get status from the server)"
        print "    $ recho info"
        print "         (Show the configuration)"
        print "    $ recho delete"
        print "         (Delete the configuration)"
