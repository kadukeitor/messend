#! /usr/bin/env python
# -*- coding: utf-8 -*-

import os
import json
import urllib
import socket
import getpass
import ConfigParser
import argparse


def get_server():
    return raw_input("server: ")


def get_host():
    return socket.gethostname()


def get_key(server, host):
    user = getpass.getuser()
    params = urllib.urlencode({'user': user, 'server': host})
    try:
        f = urllib.urlopen(server + "/register?%s" % params)
        response = json.loads(f.read())
        if response.get('_id'):
            return response.get('_id')
        else:
            print
            print "error: invalid key"
            exit()
    except:
        print
        print "error: invalid server"
        exit()


def show_wizard():
    print "Welcome to RECHO"
    print "Before anything you need define :"
    print " - the URL of the Server where the messages will be saved."
    print
    config.add_section('global')
    host = get_host()
    config.set('global', 'host', host)
    server = get_server()
    config.set('global', 'server', server)
    key = get_key(server, host)
    config.set('global', 'key', key)
    with open(config_path, 'wb') as configfile:
        config.write(configfile)
    print
    print "Configuration success"
    print "You can change the configuration on '~/.recho.conf'"
    print
    print "To store MESSAGES"
    print "$ recho -m \"my message\""
    print
    exit()


def show_status(details):
    params = urllib.urlencode({'key': key})
    try:
        f = urllib.urlopen(server + "/status?%s" % params)
        response = json.loads(f.read())
        print "Last messages:"
        for message in response:
            id = ""
            if details:
                id = message.get('_id') + " "
            print id + message.get('datetime') + " " + message.get('user') + " " + message.get('message')
    except:
        print "error: retrieving data"


def show_config():
    print "Configuration:"
    print "server : " + server
    print "key    : " + key
    print "host   : " + host


def restart_config():
    confirmation = raw_input("are you sure restart the configuration [yes] ?: ")
    if confirmation == "yes":
        os.remove(config_path)
        print "configuration restarted"
    else:
        print "operation canceled"


def delete_message(id):
    params = urllib.urlencode({'key': key, 'id': id})
    try:
        f = urllib.urlopen(server + "/delete?%s" % params)
        response = json.loads(f.read())
        if response.get('status') == 'success':
            print "message deleted"
        else:
            print  "error: deleting the message"
    except:
        print  "error: deleting the message"


def send_message(message):
    params = urllib.urlencode({'key': key, 'message': message})
    try:
        f = urllib.urlopen(server + "/message?%s" % params)
        response = json.loads(f.read())
        if response.get('_id'):
            print "message saved > " + response.get('message')
        else:
            print "error: invalid key"
    except:
        print  "error: saving the message"


if __name__ == "__main__":

    config_path = os.path.expanduser("~") + '/.recho.conf'
    config = ConfigParser.RawConfigParser()
    config.read(config_path)

    try:
        server = config.get('global', 'server')
        key = config.get('global', 'key')
        host = config.get('global', 'host')
    except:
        show_wizard()

    parser = argparse.ArgumentParser(description="Light CLI system to store MESSAGES.",
                                     version="0.1", usage="%(prog)s [options] -m MESSAGE")

    message = parser.add_argument_group('message')
    message.add_argument('-m', '--message', action="store", help="store message")
    message.add_argument('-d', '--delete', action="store", help="delete message by id", metavar="MESSAGE_ID")

    status = parser.add_argument_group('status')
    status.add_argument('-s', '--status', action="store_true", default=False, help="show status from the server")
    status.add_argument('-S', '--status-more', action="store_true", default=False, help="verbose status")

    config = parser.add_argument_group('configuration')
    config.add_argument('-c', '--config', action="store_true", default=False, help="show configuration")
    config.add_argument('-r', '--restart', action="store_true", default=False, help="restart configuration")

    args = parser.parse_args()

    if args.config:
        show_config()
    elif args.restart:
        restart_config()
    elif args.status:
        show_status(False)
    elif args.status_more:
        show_status(True)
    elif args.delete:
        delete_message(args.delete)
    else:
        if args.message:
            send_message(args.message)
        else:
            parser.print_help()